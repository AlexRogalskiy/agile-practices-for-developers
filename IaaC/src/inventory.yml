- hosts: all
  gather_facts: no
  become: yes
  tasks:
  - name: "<APT> Prepare apt cache."
    apt:
      autoremove: yes
      autoclean: yes
      update_cache: yes
      cache_valid_time: 86400

- hosts: pre-prod-app-server
  gather_facts: no
  become: yes
  tasks:
  - name: "<APT> Install JRE for running java apps."
    apt:
      name: openjdk-8-jre-headless
      state: present

- hosts: ci-agents
  gather_facts: no
  become: yes
  tasks:
  - name: "<APT> Install git"
    apt:
      name: git
      state: present
  - name: "<APT> Install JDK for compiling java projects."
    apt:
      name: openjdk-8-jdk-headless
      state: present
  - name: "<APT> Install Gradle build tool for java projects."
    apt:
      name: gradle
      state: present

- hosts: ci-server
  gather_facts: no
  become: yes
  tasks:
  - name: "<APT> Install gnupg"
    apt:
      name: gnupg
      state: present
  - name: "<WGET> Add repo"
    shell: "wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | apt-key add -"
  - name: "<DEB> Add deb package"
    shell: "sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'"
  - name: "<APT> Install Jenkins"
    apt:
      update_cache: yes
      name: jenkins
      state: present
  - name: "<init.d> Start Jenkins"
    service:
      name: jenkins
      state: started

- hosts: repository-server
  gather_facts: no
  become: yes
  vars:
    nexus_version: 3.16.0-01
    nexus_download_url: "https://sonatype-download.global.ssl.fastly.net/repository/repositoryManager/3/nexus-{{nexus_version}}-unix.tar.gz"
    nexus_download_dest: "/tmp/nexus-{{nexus_version}}-unix.tar.gz"
    nexus_dir: /opt/sonatype
    nexus_home: "{{nexus_dir}}/nexus-{{nexus_version}}"
  tasks:
  - name: "<WGET> Download Nexus distr for storing java build artifacts."
    get_url:
      url: "{{nexus_download_url}}"
      dest: "{{nexus_download_dest}}"
      mode: 777
    register: nexus_download
  - name: "<OS> Create NEXUS_HOME directory."
    file:
      path: "{{nexus_home}}"
      state: directory
  - name: "<unzip> Extract distr."
    unarchive:
      src: "{{nexus_download_dest}}"
      dest: "{{nexus_dir}}"
      remote_src: yes
    when: nexus_download.changed
  - name: "<OS> Create group."
    group:
      name: nexus
  - name: "<OS> Create user."
    user:
      name: nexus
      group: nexus
  - name: "<OS> Make directory property of user/group."
    file:
      path: "{{nexus_dir}}"
      group: nexus
      owner: nexus
      recurse: yes
  - name: "<OS> Remove distr."
    file:
      state: absent
      path: "{{nexus_download_dest}}"
  - name: "<OS> Make nexus runned by its user."
    lineinfile:
      dest: "{{nexus_home}}/bin/nexus"
      regexp: "#RUN_AS_USER="
      line: "RUN_AS_USER=nexus"
      backrefs: yes
  - name: "<OS> Set NEXUS_HOME."
    lineinfile:
      dest: "{{nexus_home}}/bin/nexus"
      regexp: "^NEXUS_HOME"
      line: "NEXUS_HOME={{nexus_home}}"
      backrefs: yes
  - name: "<OS> Create nexus piddir."
    file:
      path: /var/run/nexus
      state: directory
      group: nexus
      owner: nexus
  - name: "<OS> Set nexus pidir."
    lineinfile:
      dest: "{{nexus_home}}/bin/nexus"
      regexp: "^#PIDDIR="
      line: "PIDDIR=/var/run/nexus"
      backrefs: true
  - name: "<OS> Create symbolic links to /etc/init.d/nexus"
    file:
      src: "{{nexus_home}}/bin/nexus"
      dest: /etc/init.d/nexus
      state: link
  - name: "<init.d> Configure runlevel links."
    command: update-rc.d nexus defaults
  - name: "<init.d> Start nexus."
    service:
      name: nexus
      state: started
      pattern: "{{ nexus_home }}"

- hosts: sonar-server, pre-prod-db-server
  gather_facts: no
  become: yes
  tasks:
  - name: "<APT> Install Postresql."
    apt:
      name: postgresql-10
      state: present
  - name: "<PG> Start Postgresql service."
    service:
      name: postgresql
      state: started
    # DoD:
    # service postgresql restart
    # su - postgres
    # psql
    # \conninfo

- hosts: sonar-server
  gather_facts: no
  become: yes
  vars:
    sonar_version: 7.4
    sonar_distr: "sonarqube-{{sonar_version}}"
    sonar_download_url: "https://binaries.sonarsource.com/Distribution/sonarqube/{{sonar_distr}}.zip"
    sonar_download_dest: "/tmp/{{sonar_distr}}.zip"
  tasks:
  - name: "<APT> Install unzip."
    apt:
      name: unzip
  - name: "<APT> Install sudo."
    apt:
      name: sudo
  - name: "<WGET> Download Sonar distr."
    get_url:
      url: "{{sonar_download_url}}"
      dest: "{{sonar_download_dest}}"
      mode: 777
    register: sonar_download
  - name: "<OS> Ensure group 'sonar' exists."
    group:
      name: sonar
      state: present
  - name: "<OS> Add the user 'sonar'."
    user:
      name: sonar
      group: sonar
  - name: "<OS> Create SONAR_HOME."
    file:
      path: "/opt/{{sonar_distr}}"
      state: directory
      owner: sonar
      group: sonar
      mode: o+rw
      recurse: yes
  - name: "<Unzip> Extract distr."
    unarchive:
      src: "{{sonar_download_dest}}"
      dest: /opt
      remote_src: yes
      owner: sonar
      group: sonar
      mode: o+rw
    when: sonar_download.changed
  - name: "<Conf> Set running user for Sonar."
    replace:
      path: "/opt/{{sonar_distr}}/bin/linux-x86-64/sonar.sh"
      regexp: '^#RUN_AS_USER='
      replace: 'RUN_AS_USER=sonar'
  - name: "<Conf> Set DB URL for Sonar DB."
    lineinfile:
      dest: "/opt/{{sonar_distr}}/conf/sonar.properties"
      line: "sonar.jdbc.url=jdbc:postgresql://localhost/sonar"
  - name: "<Conf> Set DB USERNAME for Sonar DB."
    lineinfile:
      dest: "/opt/{{sonar_distr}}/conf/sonar.properties"
      line: "sonar.jdbc.username=sonar"
  - name: "<Conf> Set DB PASSWORD for Sonar DB."
    lineinfile:
      dest: "/opt/{{sonar_distr}}/conf/sonar.properties"
      line: "sonar.jdbc.password={{sonar_db_user_password}}"
  - name: "<PG> Create Sonar DB user."
    shell: createuser sonar
    become_user: postgres
  - name: "<PG> Set Sonar DB users password."
    shell: "psql -c \"ALTER USER sonar WITH ENCRYPTED password '{{sonar_db_user_password}}'\""
    become_user: postgres
  - name: "<PG> Create Sonar DB user."
    shell: "psql -c \"CREATE DATABASE sonar OWNER sonar\""
    become_user: postgres
  - name: "<init.d> Make Sonar link."
    file:
      src: "/opt/{{sonar_distr}}/bin/linux-x86-64/sonar.sh"
      dest: /etc/init.d/sonar
      state: link
  - name: "<init.d> Set service."
    shell: update-rc.d sonar defaults
  - name: "<init.d> Start service."
    service:
      name: sonar
      state: started
  - name: "<OS> Remove distr."
    file:
      path: "/tmp/{{sonar_distr}}.zip"
      state: absent
